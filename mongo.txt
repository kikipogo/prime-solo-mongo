//1.	Create a collection named orders.
db.createCollection("orders")

//2.	Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields.
db.getCollection('orders').insert({orderDate: new Date(), orderTotal: 39, lineItems: [{unitPrice: 5}, {quantity: 10}, {productName: "pepsi"}]})
db.getCollection('orders').insert({orderDate: new Date(), orderTotal: 40, lineItems: [{unitPrice: 7}, {quantity: 12}, {productName: "coke"}]})
db.getCollection('orders').insert({orderDate: new Date(), orderTotal: 39, lineItems: [{unitPrice: 6}, {quantity: 13}, {productName: "oranges"}]})

//3.	Find a single order document, any order document.
db.getCollection('orders').find({})

//4.	Find all orders and make them look pretty.
db.getCollection('orders').find({}).pretty()

//5.	Find all orders with an orderDate that is prior to 1/1/2016.
db.getCollection('orders').find({orderDate: {$lt: ISODate("2016-01-01")}})

//6.	Find all orders with an orderDate that is after 1/1/2016.
db.getCollection('orders').find({orderDate: {$gt: ISODate("2016-01-01")}})

//7.	Find orders with lineItems that have a quantity that is less than 50, but greater than 5. HINT: Look at $and and dot notation.
db.getCollection('orders').find({$and: [{"lineItems.quantity": {$lt: 50}}, {"lineItems.quantity": {$gt: 5}}]})

//8.	Update one of your line items to 42.99. HINT: Look at dot notation

db.getCollection('orders').update({_id : ObjectId("58c823802be903a9cfd3a81c")},{$set: {"lineItems[quantity]": 42.99}})

//9.	Remove one of your orders.
db.getCollection('orders').remove({_id : ObjectId("58c823802be903a9cfd3a81c")})
